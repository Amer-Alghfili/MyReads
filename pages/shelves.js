import { Box, chakra, useToast } from "@chakra-ui/react";
import Head from "next/head";
import React from "react";
import { DragDropContext, resetServerContext } from "react-beautiful-dnd";
import Feedback from "../components/Feedback";
import Footer from "../components/Footer";
import Header from "../components/Header";
import Shelf from "../components/Shelf";
import { getAll, update } from "../services/bookAPI";

export default function Shelves({ mountedBooks }) {
  const toast = useToast();
  const [booksShelves, setBooksShelves] = React.useState(() => {
    return {
      currentlyReading: filterBooksByShelf(mountedBooks, "currentlyReading"),
      read: filterBooksByShelf(mountedBooks, "read"),
      wantToRead: filterBooksByShelf(mountedBooks, "wantToRead"),
    };
  });

  function filterBooksByShelf(books, shelf) {
    return books.filter((book) => book.shelf == shelf);
  }

  async function handleAddBook(book, shelf) {
    await update(book, shelf);
    // throw new Error("test");
    const updatedBooks = await getAll();
    setBooksShelves({
      wantToRead: filterBooksByShelf(updatedBooks, "wantToRead"),
      read: filterBooksByShelf(updatedBooks, "read"),
      currentlyReading: filterBooksByShelf(updatedBooks, "currentlyReading"),
    });
  }

  async function onShelvesUpdate(result) {
    const { destination, source, draggableId } = result;
    if (!destination) {
      return;
    }
    if (
      destination.droppableId == source.draggableId &&
      destination.index == source.index
    ) {
      return;
    }
    if (destination.droppableId == source.droppableId) {
      const shelfBooks = [...booksShelves[source.droppableId]];
      const [book] = shelfBooks.splice(source.index, 1);
      shelfBooks.splice(destination.index, 0, book);
      const newShelves = { ...booksShelves, [source.droppableId]: shelfBooks };
      setBooksShelves(newShelves);
    } else {
      const tempShelves = { ...booksShelves };
      const sourceShelfBooks = [...booksShelves[source.droppableId]];
      const [book] = sourceShelfBooks.splice(source.index, 1);
      const destinationShelfBooks = [...booksShelves[destination.droppableId]];
      destinationShelfBooks.splice(destination.index, 0, book);
      const newShelves = {
        ...booksShelves,
        [source.droppableId]: sourceShelfBooks,
        [destination.droppableId]: destinationShelfBooks,
      };
      setBooksShelves(newShelves);
      try {
        await update(book, destination.droppableId);
        toast({
          render: (props) => (
            <Feedback
              {...props}
              title="Book's shelf updated successfully"
              description={
                <>
                  {book.title}'s shelf has been changed from
                  {
                    <chakra.span fontStyle="italic">
                      {" "}
                      {source.droppableId}{" "}
                    </chakra.span>
                  }
                  to
                  {
                    <chakra.span fontStyle="italic">
                      {" "}
                      {destination.droppableId}{" "}
                    </chakra.span>
                  }
                  shelf successfully
                </>
              }
            />
          ),
          duration: 3000,
          isClosable: true,
          position: "top",
        });
      } catch (err) {
        setBooksShelves(tempShelves);
        toast({
          render: (props) => (
            <Feedback
              {...props}
              variant="fail"
              title="Book added successfully"
              description={
                <>
                  Couldn't add book.title to
                  <chakra.span fontStyle="italic"> {shelf} </chakra.span> shelf
                </>
              }
            />
          ),
          duration: 3000,
          isClosable: true,
          position: "top",
        });
      }
    }
  }
  return (
    <Box bgColor="#F2F6FF" minH="100vh" color="#454545">
      <Head>
        <title>Shelves</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <Header />
      <div className="root">
        <chakra.main p={{ base: "2em", md: "4em" }}>
          <div className="double-container">
            <DragDropContext onDragEnd={onShelvesUpdate}>
              <Box position="relative">
                <Shelf
                  shelfTitle="Currently Reading"
                  shelf="currentlyReading"
                  books={booksShelves.currentlyReading}
                  onAddBook={(book, shelf) => handleAddBook(book, shelf)}
                />
                <Shelf
                  shelfTitle="Want to Read"
                  shelf="wantToRead"
                  books={booksShelves.wantToRead}
                  onAddBook={(book, shelf) => handleAddBook(book, shelf)}
                />
                <Shelf
                  shelfTitle="Read"
                  shelf="read"
                  books={booksShelves.read}
                  onAddBook={(book, shelf) => handleAddBook(book, shelf)}
                />
              </Box>
            </DragDropContext>
          </div>
        </chakra.main>
      </div>
      <Footer />
    </Box>
  );
}

export async function getServerSideProps() {
  resetServerContext();
  const books = await getAll();
  return {
    props: {
      mountedBooks: books,
    },
  };
}
