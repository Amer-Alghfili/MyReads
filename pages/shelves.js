import {
  Box,
  chakra,
  Modal,
  ModalOverlay,
  useDisclosure,
} from "@chakra-ui/react";
import Head from "next/head";
import React from "react";
import { DragDropContext, resetServerContext } from "react-beautiful-dnd";
import Footer from "../components/Footer";
import Header from "../components/Header";
import SearchModal from "../components/shelf-page/SearchModal";
import Shelf from "../components/shelf-page/Shelf";
import ShelfBooks from "../components/shelf-page/ShelfBooks";
import ShelfHeader from "../components/shelf-page/ShelfHeader";
import useShelves from "../hooks/manageBookShelves";
import { getAll } from "../services/bookAPI";

export default function Shelves({ mountedBooks }) {
  const { booksShelves, updateBookShelves, addBookToShelves } =
    useShelves(mountedBooks);

  const [shelfCode, setShelfCode] = React.useState("");
  const [shelfTitle, setShelfTitle] = React.useState("");
  const { isOpen, onOpen, onClose } = useDisclosure();

  function handleSearchModalOpen({ title, code }) {
    onOpen();
    setShelfCode(code);
    setShelfTitle(title);
  }

  return (
    <Box bgColor="#F2F6FF" minH="100vh" color="#454545">
      <Head>
        <title>Shelves</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <Header />
      <div className="root">
        <chakra.main p={{ base: "2em", md: "4em" }}>
          <div className="double-container">
            <DragDropContext onDragEnd={updateBookShelves}>
              <Box position="relative">
                <Shelf
                  ShelfHeader={
                    <ShelfHeader
                      title="Currently Reading"
                      code="currentlyReading"
                      onOpen={handleSearchModalOpen}
                      isShelfEmpty={booksShelves.currentlyReading.length <= 0}
                    />
                  }
                  ShelfBooks={
                    <ShelfBooks
                      books={booksShelves.currentlyReading}
                      code="currentlyReading"
                      onModalOpen={(shelf) => onOpen(shelf)}
                    />
                  }
                />
                <Shelf
                  ShelfHeader={
                    <ShelfHeader
                      title="Want to Read"
                      code="wantToRead"
                      onOpen={handleSearchModalOpen}
                      isShelfEmpty={booksShelves.wantToRead.length <= 0}
                    />
                  }
                  ShelfBooks={
                    <ShelfBooks
                      books={booksShelves.wantToRead}
                      code="wantToRead"
                      onModalOpen={(shelf) => onOpen(shelf)}
                    />
                  }
                />
                <Shelf
                  ShelfHeader={
                    <ShelfHeader
                      title="Read"
                      code="read"
                      onOpen={handleSearchModalOpen}
                      isShelfEmpty={booksShelves.read.length <= 0}
                    />
                  }
                  ShelfBooks={
                    <ShelfBooks
                      books={booksShelves.read}
                      code="read"
                      onModalOpen={(shelf) => onOpen(shelf)}
                    />
                  }
                />
              </Box>
            </DragDropContext>
          </div>
        </chakra.main>
      </div>
      <Footer />
      <Modal isOpen={isOpen} onClose={onClose}>
        <ModalOverlay />
        <SearchModal
          shelfCode={shelfCode}
          shelfTitle={shelfTitle}
          isOpen={isOpen}
          onAddBook={(book) =>
            addBookToShelves(book, { shelfCode, shelfTitle })
          }
        />
      </Modal>
    </Box>
  );
}

export async function getServerSideProps() {
  resetServerContext();
  const books = await getAll();
  return {
    props: {
      mountedBooks: books,
    },
  };
}
